{"abstract":[{"type":"text","text":"The route used to request single instances of this type."},{"type":"text","text":" "},{"type":"text","text":"Set this up to return proper route endpoints for any provided identifier (or "},{"code":"nil","type":"codeVoice"},{"type":"text","text":", if appropriate for the API)."}],"identifier":{"url":"doc:\/\/Ether\/documentation\/Ether\/EtherSingularFetchable\/singularRoute(id:)","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/Ether\/documentation\/Ether","doc:\/\/Ether\/documentation\/Ether\/EtherSingularFetchable"]]},"metadata":{"externalID":"s:5Ether0A17SingularFetchableP13singularRoute2idAA0aE0_pSSSg_tFZ","required":true,"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"singularRoute"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"id"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":"?) -> ","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EtherRoute","preciseIdentifier":"s:5Ether0A5RouteP","kind":"typeIdentifier"}],"roleHeading":"Type Method","symbolKind":"method","modules":[{"name":"Ether"}],"role":"symbol","title":"singularRoute(id:)"},"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["Mac Catalyst"],"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"singularRoute"},{"text":"(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":"?) -> "},{"text":"any","kind":"keyword"},{"kind":"text","text":" "},{"text":"EtherRoute","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","preciseIdentifier":"s:5Ether0A5RouteP","kind":"typeIdentifier"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"id","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The identifier of the instance this route will fetch from the server."}]}]}]},{"kind":"content","content":[{"type":"heading","anchor":"return-value","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","isActive":true,"type":"reference"},{"type":"text","text":" corresponding to the type and provided identifier."}]}]},{"content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"inlineContent":[{"text":"By convention, this involves the route containing an identifier representing the specific item in question.","type":"text"},{"type":"text","text":" "},{"text":"E.g. in the URL ","type":"text"},{"code":"https:\/\/site.com\/users\/1","type":"codeVoice"},{"type":"text","text":", the "},{"type":"codeVoice","code":"1"},{"text":" represents the identifier.","type":"text"},{"text":" ","type":"text"},{"text":"Some sites also use username strings, such as ","type":"text"},{"type":"codeVoice","code":"https:\/\/github.com\/JacobSyndeo"},{"type":"text","text":". In this case, "},{"code":"JacobSyndeo","type":"codeVoice"},{"type":"text","text":" is the identifier."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For these, youâ€™d want to return:"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\"https:\/\/site.com\/users\/\" + id"},{"type":"text","text":" "},{"text":"or","type":"text"},{"text":" ","type":"text"},{"code":"\"https:\/\/github.com\/\" + id","type":"codeVoice"},{"text":", respectively.","type":"text"}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/ether\/ethersingularfetchable\/singularroute(id:)"]}],"sections":[],"references":{"doc://Ether/documentation/Ether/EtherRoute":{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","abstract":[{"type":"text","text":"A custom protocol to which host apps can conform."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"EtherRoute","kind":"identifier"}],"url":"\/documentation\/ether\/etherroute","type":"topic","title":"EtherRoute","kind":"symbol","navigatorTitle":[{"text":"EtherRoute","kind":"identifier"}]},"doc://Ether/documentation/Ether/EtherSingularFetchable/singularRoute(id:)":{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherSingularFetchable\/singularRoute(id:)","abstract":[{"type":"text","text":"The route used to request single instances of this type."},{"type":"text","text":" "},{"type":"text","text":"Set this up to return proper route endpoints for any provided identifier (or "},{"code":"nil","type":"codeVoice"},{"text":", if appropriate for the API).","type":"text"}],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"singularRoute","kind":"identifier"},{"kind":"text","text":"("},{"text":"id","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":"?) -> "},{"kind":"keyword","text":"any"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:5Ether0A5RouteP","text":"EtherRoute"}],"url":"\/documentation\/ether\/ethersingularfetchable\/singularroute(id:)","type":"topic","title":"singularRoute(id:)","kind":"symbol","required":true},"doc://Ether/documentation/Ether":{"identifier":"doc:\/\/Ether\/documentation\/Ether","abstract":[{"text":"Welcome to easy, clean, Swifty networking!","type":"text"}],"kind":"symbol","url":"\/documentation\/ether","type":"topic","role":"collection","title":"Ether"},"doc://Ether/documentation/Ether/EtherSingularFetchable":{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherSingularFetchable","abstract":[{"text":"Types conforming to ","type":"text"},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherSingularFetchable","type":"reference","isActive":true},{"type":"text","text":" assert that their APIs provide a way to get single instances back, usually by providing an identifier."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EtherSingularFetchable"}],"url":"\/documentation\/ether\/ethersingularfetchable","type":"topic","title":"EtherSingularFetchable","kind":"symbol","navigatorTitle":[{"text":"EtherSingularFetchable","kind":"identifier"}]}}}
{"metadata":{"modules":[{"name":"Ether"}],"role":"collectionGroup","roleHeading":"Article","title":"Usage"},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","abstract":[{"text":"There are several ways to use Ether. This article will help you decide which way to use, and in which cases.","type":"text"}],"seeAlsoSections":[{"identifiers":["doc:\/\/Ether\/documentation\/Ether\/Introduction","doc:\/\/Ether\/documentation\/Ether\/Quick-Overview"],"title":"Essentials","generated":true}],"identifier":{"url":"doc:\/\/Ether\/documentation\/Ether\/Usage","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/ether\/usage"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Ether\/documentation\/Ether"]]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When using Ether, you may have your own coding style and\/or preferences. You may prefer calling "},{"code":"Ether","type":"codeVoice"},{"text":" directly. You may instead prefer to call from a ","type":"text"},{"code":"Route","type":"codeVoice"},{"text":" or a ","type":"text"},{"type":"codeVoice","code":"TypedRoute"},{"text":". In other cases, you may prefer to use the ","type":"text"},{"code":"Fetchable","type":"codeVoice"},{"type":"text","text":" protocol. Ether supports all of these styles."}]},{"type":"heading","text":"Usage Styles","level":2,"anchor":"Usage-Styles"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are four main ways to use Ether:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Directly, calling the functions on ","type":"text"},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Through "},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Through ","type":"text"},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Through "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherFetchable"},{"type":"text","text":"."}]}]}]},{"type":"heading","text":"Direct","anchor":"Direct","level":3},{"inlineContent":[{"type":"text","text":"In the most straightforward (but longform) way, you can call functions on "},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether","type":"reference","isActive":true},{"text":" directly.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let user = try await Ether.get(route: Routes.user(id: 1),","                               type: User.self)"],"type":"codeListing"},{"type":"heading","anchor":"Through-a-Route","text":"Through a Route","level":3},{"inlineContent":[{"type":"text","text":"If you want to use a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute"},{"type":"text","text":", you can use the "},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute\/get(type:parameters:decoder:)","isActive":true},{"type":"text","text":" method on the "},{"code":"Route","type":"codeVoice"},{"text":" itself.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let user = try await Routes.user(id: 1).get(type: User.self)"]},{"text":"Through a TypedRoute","type":"heading","anchor":"Through-a-TypedRoute","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute"},{"type":"text","text":", you can use the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute\/get(parameters:decoder:)"},{"text":" method on the ","type":"text"},{"type":"codeVoice","code":"TypedRoute"},{"type":"text","text":" itself."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Requires Routes to conform to `EtherTypedRoute`.","let user = try await Routes.user(id: 1).get()"]},{"anchor":"Through-a-Fetchable","level":3,"text":"Through a Fetchable","type":"heading"},{"inlineContent":[{"type":"text","text":"If you want to use "},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherFetchable","isActive":true,"type":"reference"},{"type":"text","text":", you can use the "},{"code":"Ether\/EtherFetchable\/fetch(id:parameters:)","type":"codeVoice"},{"type":"text","text":" method on the "},{"type":"codeVoice","code":"Fetchable"},{"type":"text","text":" type itself."}],"type":"paragraph"},{"code":["\/\/ Requires User to conform to `EtherFetchable`.","let user = try await User.fetch(id: 1)"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"Comparison","anchor":"Comparison"},{"inlineContent":[{"type":"text","text":"Here is a table comparing the different methods of using Ether."}],"type":"paragraph"},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Mode","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"How it works","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Pros"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Cons"}]}]],[[{"inlineContent":[{"text":"Direct (","type":"text"},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","isActive":true,"type":"reference"},{"text":")","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"code":"Ether.get(route: _, type: _, …)","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"The most straightforward; no need to set anything else up","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The longest"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Direct ("},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute"},{"text":")","type":"text"}]}],[{"inlineContent":[{"code":"Ether.get(typedRoute: _, …)","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Shorter; omits "},{"type":"codeVoice","code":"type"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Need to set up "},{"code":"TypedRoute","type":"codeVoice"},{"type":"text","text":"s"}]}]],[[{"inlineContent":[{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","type":"reference","isActive":true}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"route.get(type: _, …)","type":"codeVoice"}]}],[{"inlineContent":[{"text":"Shorter; omits ","type":"text"},{"type":"codeVoice","code":"Ether"},{"text":"; no need to set anything else up","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"A bit longer than others"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute","isActive":true,"type":"reference"}]}],[{"inlineContent":[{"type":"codeVoice","code":"typedRoute.get(_, …)"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"text":"Even shorter; omits both ","type":"text"},{"type":"codeVoice","code":"Ether"},{"type":"text","text":" and "},{"code":"type","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Need to set up ","type":"text"},{"type":"codeVoice","code":"TypedRoute"},{"text":"s","type":"text"}]}]],[[{"inlineContent":[{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherFetchable","isActive":true,"type":"reference"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"Type.fetch(id: _)","type":"codeVoice"}]}],[{"inlineContent":[{"text":"The clearest","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Need to set up your types as ","type":"text"},{"code":"Fetchable","type":"codeVoice"},{"type":"text","text":"; doesn’t support as much customization at call time"}],"type":"paragraph"}]]],"type":"table"},{"anchor":"Recommendations","text":"Recommendations","level":2,"type":"heading"},{"type":"heading","level":3,"text":"Use EtherFetchable when possible","anchor":"Use-EtherFetchable-when-possible"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We recommend using "},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherFetchable","isActive":true},{"text":" most of the time, as it provides a clean, concise, and easy-to-use interface. It also allows you to use the same interface for all of your types, which can be useful if you have a lot of types that you want to fetch.","type":"text"}]},{"text":"Use EtherRoute when you need to customize the call","level":3,"anchor":"Use-EtherRoute-when-you-need-to-customize-the-call","type":"heading"},{"inlineContent":[{"text":"If you need to customize the call, you can use ","type":"text"},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","isActive":true,"type":"reference"},{"text":". This allows you to customize the call, such as adding headers or changing the method. This lets you use ","type":"text"},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","isActive":true},{"type":"text","text":", which is a convenient typealias for both "},{"code":"URL","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"String"},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"text":"Use EtherTypedRoute when you need to customize the call and don’t want to specify the type each time","type":"heading","anchor":"Use-EtherTypedRoute-when-you-need-to-customize-the-call-and-dont-want-to-specify-the-type-each-time"},{"type":"paragraph","inlineContent":[{"text":"If you need to customize the call, but don’t want to specify the type each time, you can use ","type":"text"},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute","type":"reference","isActive":true},{"text":". This offers the same customization as EtherRoute, but also allows you to omit the type for each call. This does require you to set up ","type":"text"},{"type":"codeVoice","code":"TypedRoute"},{"text":"s, however, which can be a bit more work.","type":"text"}]}]}],"references":{"doc://Ether/documentation/Ether/Introduction":{"identifier":"doc:\/\/Ether\/documentation\/Ether\/Introduction","type":"topic","url":"\/documentation\/ether\/introduction","role":"collectionGroup","title":"Introduction","abstract":[{"text":"What is Ether, and why should you use it?","type":"text"}],"kind":"article"},"doc://Ether/documentation/Ether/EtherRoute/get(type:parameters:decoder:)":{"url":"\/documentation\/ether\/etherroute\/get(type:parameters:decoder:)","role":"symbol","abstract":[{"text":"Fires off a GET request to fetch data, using the current ","type":"text"},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether\/Route","type":"reference","isActive":true},{"type":"text","text":" instance."}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute\/get(type:parameters:decoder:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"get","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"type","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:5Ether0A5RoutePAAE3get4type10parameters7decoderqd__qd__m_SDySSs25LosslessStringConvertible_pG10Foundation11JSONDecoderCtYaKSeRd__lF1TL_qd__mfp","text":"T"},{"text":".Type, ","kind":"text"},{"text":"parameters","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Ether","kind":"typeIdentifier","preciseIdentifier":"s:5EtherAAV"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:5EtherAAV10Parametersa","text":"Parameters"},{"text":", ","kind":"text"},{"text":"decoder","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"JSONDecoder","preciseIdentifier":"s:10Foundation11JSONDecoderC"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:5Ether0A5RoutePAAE3get4type10parameters7decoderqd__qd__m_SDySSs25LosslessStringConvertible_pG10Foundation11JSONDecoderCtYaKSeRd__lF1TL_qd__mfp","text":"T"}],"title":"get(type:parameters:decoder:)"},"doc://Ether/documentation/Ether/EtherTypedRoute/get(parameters:decoder:)":{"abstract":[{"text":"Fires off a GET request to fetch data, using the current ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether\/TypedRoute"},{"text":" instance.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/ether\/ethertypedroute\/get(parameters:decoder:)","title":"get(parameters:decoder:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"get","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"parameters"},{"kind":"text","text":": "},{"text":"Ether","kind":"typeIdentifier","preciseIdentifier":"s:5EtherAAV"},{"text":".","kind":"text"},{"text":"Parameters","kind":"typeIdentifier","preciseIdentifier":"s:5EtherAAV10Parametersa"},{"text":", ","kind":"text"},{"text":"decoder","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"JSONDecoder","preciseIdentifier":"s:10Foundation11JSONDecoderC","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:5Ether0A10TypedRouteP11DecodedTypeQa","kind":"typeIdentifier","text":"DecodedType"}],"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute\/get(parameters:decoder:)"},"doc://Ether/documentation/Ether/Ether/Route":{"url":"\/documentation\/ether\/ether\/route","role":"symbol","abstract":[{"text":"A typealias for ","type":"text"},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","isActive":true},{"text":", namespaced under ","type":"text"},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether","isActive":true,"type":"reference"},{"type":"text","text":"."}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether\/Route","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Route"}],"navigatorTitle":[{"text":"Route","kind":"identifier"}],"title":"Ether.Route"},"doc://Ether/documentation/Ether/EtherPluralFetchable":{"abstract":[{"text":"Types conforming to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherPluralFetchable"},{"text":" assert that their APIs provide a way to get multiple instances back, optionally filtered by fields specified in ","type":"text"},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether\/FetchableFilters","isActive":true}],"title":"EtherPluralFetchable","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherPluralFetchable","url":"\/documentation\/ether\/etherpluralfetchable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"EtherPluralFetchable","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"EtherPluralFetchable","kind":"identifier"}],"role":"symbol","kind":"symbol"},"doc://Ether/documentation/Ether/EtherRoute":{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","abstract":[{"type":"text","text":"A custom protocol to which host apps can conform."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"EtherRoute","kind":"identifier"}],"url":"\/documentation\/ether\/etherroute","type":"topic","title":"EtherRoute","kind":"symbol","navigatorTitle":[{"text":"EtherRoute","kind":"identifier"}]},"doc://Ether/documentation/Ether/EtherTypedRoute":{"type":"topic","url":"\/documentation\/ether\/ethertypedroute","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EtherTypedRoute"}],"title":"EtherTypedRoute","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EtherTypedRoute"}],"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute","abstract":[{"type":"text","text":"An extension of "},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","isActive":true,"type":"reference"},{"text":" that allows routes to declare associated types, corresponding to the type to which the route’s contents decode.","type":"text"}]},"doc://Ether/documentation/Ether/Quick-Overview":{"role":"collectionGroup","abstract":[{"text":"A quick glance at Ether","type":"text"}],"type":"topic","url":"\/documentation\/ether\/quick-overview","identifier":"doc:\/\/Ether\/documentation\/Ether\/Quick-Overview","title":"Quick Overview","kind":"article"},"doc://Ether/documentation/Ether/EtherFetchable":{"abstract":[{"type":"text","text":"A typealias representing conformance to both "},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherSingularFetchable","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherPluralFetchable","isActive":true},{"type":"text","text":"."}],"type":"topic","title":"EtherFetchable","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherFetchable","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EtherFetchable","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"EtherFetchable"}],"role":"symbol","url":"\/documentation\/ether\/etherfetchable","kind":"symbol"},"doc://Ether/documentation/Ether":{"identifier":"doc:\/\/Ether\/documentation\/Ether","abstract":[{"text":"Welcome to easy, clean, Swifty networking!","type":"text"}],"kind":"symbol","url":"\/documentation\/ether","type":"topic","role":"collection","title":"Ether"},"doc://Ether/documentation/Ether/EtherSingularFetchable":{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherSingularFetchable","abstract":[{"text":"Types conforming to ","type":"text"},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherSingularFetchable","type":"reference","isActive":true},{"type":"text","text":" assert that their APIs provide a way to get single instances back, usually by providing an identifier."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EtherSingularFetchable"}],"url":"\/documentation\/ether\/ethersingularfetchable","type":"topic","title":"EtherSingularFetchable","kind":"symbol","navigatorTitle":[{"text":"EtherSingularFetchable","kind":"identifier"}]},"doc://Ether/documentation/Ether/Ether/TypedRoute":{"identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether\/TypedRoute","navigatorTitle":[{"kind":"identifier","text":"TypedRoute"}],"kind":"symbol","url":"\/documentation\/ether\/ether\/typedroute","type":"topic","role":"symbol","abstract":[{"text":"A typealias for ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute","type":"reference"},{"type":"text","text":", namespaced under "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether"},{"type":"text","text":"."}],"title":"Ether.TypedRoute","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TypedRoute"}]},"doc://Ether/documentation/Ether/Ether":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Ether","kind":"identifier"}],"title":"Ether","kind":"symbol","navigatorTitle":[{"text":"Ether","kind":"identifier"}],"identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether","url":"\/documentation\/ether\/ether","type":"topic","abstract":[{"text":"The core of Ether. All the core functions and types are namespaced under this.","type":"text"}],"role":"symbol"}}}
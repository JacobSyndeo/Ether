{"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"Usage","modules":[{"name":"Ether"}],"roleHeading":"Article","role":"collectionGroup"},"identifier":{"url":"doc:\/\/Ether\/documentation\/Ether\/Usage","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"There are several ways to use Ether. This article will help you decide which way to use, and in which cases."}],"seeAlsoSections":[{"identifiers":["doc:\/\/Ether\/documentation\/Ether\/Introduction","doc:\/\/Ether\/documentation\/Ether\/Quick-Overview"],"generated":true,"title":"Essentials"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/ether\/usage"]}],"hierarchy":{"paths":[["doc:\/\/Ether\/documentation\/Ether"]]},"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"type":"text","text":"When using Ether, you may have your own coding style and\/or preferences. You may prefer calling "},{"code":"Ether","type":"codeVoice"},{"text":" directly. You may instead prefer to call from a ","type":"text"},{"type":"codeVoice","code":"Route"},{"text":" or a ","type":"text"},{"type":"codeVoice","code":"TypedRoute"},{"text":". In other cases, you may prefer to use the ","type":"text"},{"type":"codeVoice","code":"Fetchable"},{"text":" protocol. Ether supports all of these styles.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Usage-Styles","text":"Usage Styles","level":2},{"inlineContent":[{"type":"text","text":"There are four main ways to use Ether:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Directly, calling the functions on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Through "},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Through "},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Through ","type":"text"},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherFetchable","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Direct","anchor":"Direct","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"In the most straightforward (but longform) way, you can call functions on ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether"},{"type":"text","text":" directly."}]},{"code":["let user = try await Ether.get(route: Routes.user(id: 1),","                               type: User.self)"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Through a Route","type":"heading","anchor":"Through-a-Route"},{"inlineContent":[{"type":"text","text":"If you want to use a "},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","isActive":true},{"type":"text","text":", you can use the "},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute\/get(type:parameters:decoder:)","type":"reference","isActive":true},{"text":" method on the ","type":"text"},{"code":"Route","type":"codeVoice"},{"text":" itself.","type":"text"}],"type":"paragraph"},{"code":["let user = try await Routes.user(id: 1).get(type: User.self)"],"syntax":"swift","type":"codeListing"},{"type":"heading","text":"Through a TypedRoute","level":3,"anchor":"Through-a-TypedRoute"},{"type":"paragraph","inlineContent":[{"text":"If you want to use ","type":"text"},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute","isActive":true},{"text":", you can use the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute\/get(parameters:decoder:)","type":"reference"},{"type":"text","text":" method on the "},{"type":"codeVoice","code":"TypedRoute"},{"type":"text","text":" itself."}]},{"code":["\/\/ Requires Routes to conform to `EtherTypedRoute`.","let user = try await Routes.user(id: 1).get()"],"syntax":"swift","type":"codeListing"},{"type":"heading","text":"Through a Fetchable","anchor":"Through-a-Fetchable","level":3},{"inlineContent":[{"type":"text","text":"If you want to use "},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherFetchable","type":"reference","isActive":true},{"type":"text","text":", you can use the "},{"code":"Ether\/EtherFetchable\/fetch(id:parameters:)","type":"codeVoice"},{"text":" method on the ","type":"text"},{"code":"Fetchable","type":"codeVoice"},{"type":"text","text":" type itself."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Requires User to conform to `EtherFetchable`.","let user = try await User.fetch(id: 1)"],"type":"codeListing"},{"type":"heading","level":2,"anchor":"Comparison","text":"Comparison"},{"inlineContent":[{"type":"text","text":"Here is a table comparing the different methods of using Ether."}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Mode","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"How it works","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Pros"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Cons"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Direct ("},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","type":"reference","isActive":true},{"type":"text","text":")"}]}],[{"inlineContent":[{"code":"Ether.get(route: _, type: _, …)","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The most straightforward; no need to set anything else up"}]}],[{"type":"paragraph","inlineContent":[{"text":"The longest","type":"text"}]}]],[[{"inlineContent":[{"text":"Direct (","type":"text"},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute","type":"reference","isActive":true},{"type":"text","text":")"}],"type":"paragraph"}],[{"inlineContent":[{"code":"Ether.get(typedRoute: _, …)","type":"codeVoice"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Shorter; omits "},{"type":"codeVoice","code":"type"}]}],[{"inlineContent":[{"text":"Need to set up ","type":"text"},{"code":"TypedRoute","type":"codeVoice"},{"text":"s","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","isActive":true}]}],[{"inlineContent":[{"code":"route.get(type: _, …)","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Shorter; omits "},{"type":"codeVoice","code":"Ether"},{"type":"text","text":"; no need to set anything else up"}],"type":"paragraph"}],[{"inlineContent":[{"text":"A bit longer than others","type":"text"}],"type":"paragraph"}]],[[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"typedRoute.get(_, …)"}]}],[{"inlineContent":[{"type":"text","text":"Even shorter; omits both "},{"code":"Ether","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"type"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Need to set up "},{"code":"TypedRoute","type":"codeVoice"},{"text":"s","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherFetchable","type":"reference"}]}],[{"inlineContent":[{"type":"codeVoice","code":"Type.fetch(id: _)"}],"type":"paragraph"}],[{"inlineContent":[{"text":"The clearest","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Need to set up your types as "},{"type":"codeVoice","code":"Fetchable"},{"type":"text","text":"; doesn’t support as much customization at call time"}],"type":"paragraph"}]]]},{"anchor":"Recommendations","text":"Recommendations","type":"heading","level":2},{"type":"heading","level":3,"text":"Use EtherFetchable when possible","anchor":"Use-EtherFetchable-when-possible"},{"type":"paragraph","inlineContent":[{"text":"We recommend using ","type":"text"},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherFetchable","isActive":true},{"type":"text","text":" most of the time, as it provides a clean, concise, and easy-to-use interface. It also allows you to use the same interface for all of your types, which can be useful if you have a lot of types that you want to fetch."}]},{"level":3,"type":"heading","anchor":"Use-EtherRoute-when-you-need-to-customize-the-call","text":"Use EtherRoute when you need to customize the call"},{"type":"paragraph","inlineContent":[{"text":"If you need to customize the call, you can use ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute"},{"type":"text","text":". This allows you to customize the call, such as adding headers or changing the method. This lets you use "},{"isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","type":"reference"},{"type":"text","text":", which is a convenient typealias for both "},{"code":"URL","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"String"},{"text":".","type":"text"}]},{"text":"Use EtherTypedRoute when you need to customize the call and don’t want to specify the type each time","anchor":"Use-EtherTypedRoute-when-you-need-to-customize-the-call-and-dont-want-to-specify-the-type-each-time","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to customize the call, but don’t want to specify the type each time, you can use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute"},{"type":"text","text":". This offers the same customization as EtherRoute, but also allows you to omit the type for each call. This does require you to set up "},{"code":"TypedRoute","type":"codeVoice"},{"text":"s, however, which can be a bit more work.","type":"text"}]}],"kind":"content"}],"sections":[],"references":{"doc://Ether/documentation/Ether/Quick-Overview":{"type":"topic","url":"\/documentation\/ether\/quick-overview","abstract":[{"text":"A quick glance at Ether","type":"text"}],"kind":"article","role":"article","title":"Quick Overview","identifier":"doc:\/\/Ether\/documentation\/Ether\/Quick-Overview"},"doc://Ether/documentation/Ether/EtherTypedRoute/get(parameters:decoder:)":{"abstract":[{"type":"text","text":"Fires off a GET request to fetch data, using the current "},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether\/TypedRoute","isActive":true},{"type":"text","text":" instance."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"get","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"parameters"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Ether","preciseIdentifier":"s:5EtherAAV"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:5EtherAAV10Parametersa","text":"Parameters"},{"text":", ","kind":"text"},{"text":"decoder","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"JSONDecoder","preciseIdentifier":"s:10Foundation11JSONDecoderC"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"DecodedType","kind":"typeIdentifier"}],"url":"\/documentation\/ether\/ethertypedroute\/get(parameters:decoder:)","type":"topic","title":"get(parameters:decoder:)","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute\/get(parameters:decoder:)","kind":"symbol","role":"symbol"},"doc://Ether/documentation/Ether/Ether/TypedRoute":{"navigatorTitle":[{"kind":"identifier","text":"TypedRoute"}],"kind":"symbol","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypedRoute"}],"abstract":[{"type":"text","text":"A typealias for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute"},{"text":", namespaced under ","type":"text"},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether","isActive":true},{"type":"text","text":"."}],"url":"\/documentation\/ether\/ether\/typedroute","identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether\/TypedRoute","role":"symbol","title":"Ether.TypedRoute"},"doc://Ether/documentation/Ether/EtherFetchable":{"type":"topic","url":"\/documentation\/ether\/etherfetchable","abstract":[{"type":"text","text":"A typealias representing conformance to both "},{"isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherSingularFetchable","type":"reference"},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherPluralFetchable"},{"type":"text","text":"."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"EtherFetchable","kind":"identifier"}],"navigatorTitle":[{"text":"EtherFetchable","kind":"identifier"}],"role":"symbol","title":"EtherFetchable","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherFetchable"},"doc://Ether/documentation/Ether/EtherTypedRoute":{"abstract":[{"type":"text","text":"An extension of "},{"isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","type":"reference"},{"type":"text","text":" that allows routes to declare associated types, corresponding to the type to which the route’s contents decode."}],"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EtherTypedRoute"}],"kind":"symbol","role":"symbol","url":"\/documentation\/ether\/ethertypedroute","title":"EtherTypedRoute","navigatorTitle":[{"text":"EtherTypedRoute","kind":"identifier"}]},"doc://Ether/documentation/Ether":{"identifier":"doc:\/\/Ether\/documentation\/Ether","role":"collection","title":"Ether","kind":"symbol","url":"\/documentation\/ether","type":"topic","abstract":[{"type":"text","text":"Welcome to easy, clean, Swifty networking!"}]},"doc://Ether/documentation/Ether/EtherPluralFetchable":{"kind":"symbol","abstract":[{"type":"text","text":"Types conforming to "},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherPluralFetchable","isActive":true},{"type":"text","text":" assert that their APIs provide a way to get multiple instances back, optionally filtered by fields specified in "},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether\/FetchableFilters","isActive":true}],"navigatorTitle":[{"kind":"identifier","text":"EtherPluralFetchable"}],"type":"topic","role":"symbol","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherPluralFetchable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EtherPluralFetchable"}],"title":"EtherPluralFetchable","url":"\/documentation\/ether\/etherpluralfetchable"},"doc://Ether/documentation/Ether/Introduction":{"type":"topic","url":"\/documentation\/ether\/introduction","role":"collectionGroup","title":"Introduction","kind":"article","abstract":[{"type":"text","text":"What is Ether, and why should you use it?"}],"identifier":"doc:\/\/Ether\/documentation\/Ether\/Introduction"},"doc://Ether/documentation/Ether/Ether":{"url":"\/documentation\/ether\/ether","title":"Ether","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Ether","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"The core of Ether. All the core functions and types are namespaced under this."}],"type":"topic","identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether","navigatorTitle":[{"text":"Ether","kind":"identifier"}],"role":"symbol"},"doc://Ether/documentation/Ether/EtherRoute/get(type:parameters:decoder:)":{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute\/get(type:parameters:decoder:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"get"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"type","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":".Type, ","kind":"text"},{"text":"parameters","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:5EtherAAV","text":"Ether"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Parameters","preciseIdentifier":"s:5EtherAAV10Parametersa"},{"text":", ","kind":"text"},{"text":"decoder","kind":"externalParam"},{"kind":"text","text":": "},{"text":"JSONDecoder","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11JSONDecoderC"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/ether\/etherroute\/get(type:parameters:decoder:)","kind":"symbol","type":"topic","role":"symbol","title":"get(type:parameters:decoder:)","abstract":[{"text":"Fires off a GET request to fetch data, using the current ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether\/Route"},{"type":"text","text":" instance."}]},"doc://Ether/documentation/Ether/EtherRoute":{"navigatorTitle":[{"text":"EtherRoute","kind":"identifier"}],"role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","title":"EtherRoute","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EtherRoute"}],"abstract":[{"type":"text","text":"A custom protocol to which host apps can conform."}],"url":"\/documentation\/ether\/etherroute"},"doc://Ether/documentation/Ether/Ether/Route":{"identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether\/Route","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"Route","kind":"identifier"}],"url":"\/documentation\/ether\/ether\/route","kind":"symbol","type":"topic","role":"symbol","title":"Ether.Route","navigatorTitle":[{"kind":"identifier","text":"Route"}],"abstract":[{"text":"A typealias for ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute"},{"type":"text","text":", namespaced under "},{"isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether","type":"reference"},{"text":".","type":"text"}]},"doc://Ether/documentation/Ether/EtherSingularFetchable":{"type":"topic","url":"\/documentation\/ether\/ethersingularfetchable","abstract":[{"text":"Types conforming to ","type":"text"},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherSingularFetchable","isActive":true},{"type":"text","text":" assert that their APIs provide a way to get single instances back, usually by providing an identifier."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"EtherSingularFetchable","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"EtherSingularFetchable"}],"role":"symbol","title":"EtherSingularFetchable","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherSingularFetchable"}}}
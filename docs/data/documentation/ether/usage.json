{"metadata":{"modules":[{"name":"Ether"}],"roleHeading":"Article","title":"Usage","role":"collectionGroup"},"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"identifiers":["doc:\/\/Ether\/documentation\/Ether\/Introduction","doc:\/\/Ether\/documentation\/Ether\/Quick-Overview"],"title":"Essentials","generated":true}],"hierarchy":{"paths":[["doc:\/\/Ether\/documentation\/Ether"]]},"sections":[],"abstract":[{"text":"There are several ways to use Ether. This article will help you decide which way to use, and in which cases.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/ether\/usage"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Ether\/documentation\/Ether\/Usage"},"kind":"article","primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"inlineContent":[{"text":"When using Ether, you may have your own coding style and\/or preferences. You may prefer calling ","type":"text"},{"type":"codeVoice","code":"Ether"},{"text":" directly. You may instead prefer to call from a ","type":"text"},{"code":"Route","type":"codeVoice"},{"text":" or a ","type":"text"},{"type":"codeVoice","code":"TypedRoute"},{"text":". In other cases, you may prefer to use the ","type":"text"},{"code":"Fetchable","type":"codeVoice"},{"type":"text","text":" protocol. Ether supports all of these styles."}],"type":"paragraph"},{"level":2,"text":"Usage Styles","type":"heading","anchor":"Usage-Styles"},{"type":"paragraph","inlineContent":[{"text":"There are four main ways to use Ether:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Directly, calling the functions on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Through "},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","type":"reference","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Through "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Through ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherFetchable"},{"text":".","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"type":"heading","text":"Direct","anchor":"Direct"},{"inlineContent":[{"text":"In the most straightforward (but longform) way, you can call functions on ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether","type":"reference"},{"text":" directly.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let user = try await Ether.get(route: Routes.user(id: 1),","                               type: User.self)"]},{"type":"heading","anchor":"Through-a-Route","text":"Through a Route","level":3},{"type":"paragraph","inlineContent":[{"text":"If you want to use a ","type":"text"},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","isActive":true,"type":"reference"},{"text":", you can use the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute\/get(type:parameters:decoder:)"},{"type":"text","text":" method on the "},{"code":"Route","type":"codeVoice"},{"type":"text","text":" itself."}]},{"code":["let user = try await Routes.user(id: 1).get(type: User.self)"],"syntax":"swift","type":"codeListing"},{"anchor":"Through-a-TypedRoute","type":"heading","level":3,"text":"Through a TypedRoute"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to use "},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute","isActive":true},{"text":", you can use the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute\/get(parameters:decoder:)"},{"text":" method on the ","type":"text"},{"code":"TypedRoute","type":"codeVoice"},{"type":"text","text":" itself."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Requires Routes to conform to `EtherTypedRoute`.","let user = try await Routes.user(id: 1).get()"]},{"type":"heading","anchor":"Through-a-Fetchable","text":"Through a Fetchable","level":3},{"inlineContent":[{"text":"If you want to use ","type":"text"},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherFetchable","isActive":true},{"type":"text","text":", you can use the "},{"code":"Ether\/EtherFetchable\/fetch(id:parameters:)","type":"codeVoice"},{"text":" method on the ","type":"text"},{"code":"Fetchable","type":"codeVoice"},{"text":" type itself.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ Requires User to conform to `EtherFetchable`.","let user = try await User.fetch(id: 1)"]},{"level":2,"type":"heading","anchor":"Comparison","text":"Comparison"},{"inlineContent":[{"text":"Here is a table comparing the different methods of using Ether.","type":"text"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"text":"Mode","type":"text"}]}],[{"inlineContent":[{"text":"How it works","type":"text"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Pros"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Cons","type":"text"}],"type":"paragraph"}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Direct ("},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute"},{"text":")","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Ether.get(route: _, type: _, …)"}]}],[{"type":"paragraph","inlineContent":[{"text":"The most straightforward; no need to set anything else up","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"The longest","type":"text"}]}]],[[{"inlineContent":[{"text":"Direct (","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute"},{"text":")","type":"text"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"code":"Ether.get(typedRoute: _, …)","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Shorter; omits "},{"code":"type","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"Need to set up ","type":"text"},{"code":"TypedRoute","type":"codeVoice"},{"text":"s","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute"}]}],[{"inlineContent":[{"code":"route.get(type: _, …)","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"type":"text","text":"Shorter; omits "},{"code":"Ether","type":"codeVoice"},{"type":"text","text":"; no need to set anything else up"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"A bit longer than others"}]}]],[[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute","isActive":true,"type":"reference"}]}],[{"inlineContent":[{"code":"typedRoute.get(_, …)","type":"codeVoice"}],"type":"paragraph"}],[{"inlineContent":[{"text":"Even shorter; omits both ","type":"text"},{"type":"codeVoice","code":"Ether"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"type"}],"type":"paragraph"}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Need to set up "},{"type":"codeVoice","code":"TypedRoute"},{"type":"text","text":"s"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherFetchable"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Type.fetch(id: _)"}]}],[{"type":"paragraph","inlineContent":[{"text":"The clearest","type":"text"}]}],[{"inlineContent":[{"type":"text","text":"Need to set up your types as "},{"type":"codeVoice","code":"Fetchable"},{"text":"; doesn’t support as much customization at call time","type":"text"}],"type":"paragraph"}]]],"type":"table","header":"row"},{"type":"heading","level":2,"text":"Recommendations","anchor":"Recommendations"},{"text":"Use EtherFetchable when possible","level":3,"anchor":"Use-EtherFetchable-when-possible","type":"heading"},{"inlineContent":[{"text":"We recommend using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherFetchable","type":"reference"},{"text":" most of the time, as it provides a clean, concise, and easy-to-use interface. It also allows you to use the same interface for all of your types, which can be useful if you have a lot of types that you want to fetch.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Use-EtherRoute-when-you-need-to-customize-the-call","text":"Use EtherRoute when you need to customize the call","level":3},{"inlineContent":[{"type":"text","text":"If you need to customize the call, you can use "},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","isActive":true,"type":"reference"},{"type":"text","text":". This allows you to customize the call, such as adding headers or changing the method. This lets you use "},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","isActive":true,"type":"reference"},{"type":"text","text":", which is a convenient typealias for both "},{"code":"URL","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"String"},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"text":"Use EtherTypedRoute when you need to customize the call and don’t want to specify the type each time","anchor":"Use-EtherTypedRoute-when-you-need-to-customize-the-call-and-dont-want-to-specify-the-type-each-time","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to customize the call, but don’t want to specify the type each time, you can use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute"},{"type":"text","text":". This offers the same customization as EtherRoute, but also allows you to omit the type for each call. This does require you to set up "},{"type":"codeVoice","code":"TypedRoute"},{"type":"text","text":"s, however, which can be a bit more work."}]}],"kind":"content"}],"references":{"doc://Ether/documentation/Ether/EtherTypedRoute/get(parameters:decoder:)":{"kind":"symbol","type":"topic","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute\/get(parameters:decoder:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"get"},{"kind":"text","text":"("},{"text":"parameters","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Ether","kind":"typeIdentifier","preciseIdentifier":"s:5EtherAAV"},{"kind":"text","text":"."},{"text":"Parameters","kind":"typeIdentifier","preciseIdentifier":"s:5EtherAAV10Parametersa"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"decoder"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"JSONDecoder","preciseIdentifier":"s:10Foundation11JSONDecoderC"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"DecodedType","kind":"typeIdentifier"}],"url":"\/documentation\/ether\/ethertypedroute\/get(parameters:decoder:)","abstract":[{"type":"text","text":"Fires off a GET request to fetch data, using the current "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether\/TypedRoute"},{"type":"text","text":" instance."}],"title":"get(parameters:decoder:)","role":"symbol"},"doc://Ether/documentation/Ether/Ether/TypedRoute":{"kind":"symbol","identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether\/TypedRoute","url":"\/documentation\/ether\/ether\/typedroute","title":"Ether.TypedRoute","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"TypedRoute"}],"type":"topic","abstract":[{"type":"text","text":"A typealias for "},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute","isActive":true,"type":"reference"},{"text":", namespaced under ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether","type":"reference"},{"type":"text","text":"."}],"navigatorTitle":[{"text":"TypedRoute","kind":"identifier"}],"role":"symbol"},"doc://Ether/documentation/Ether/EtherSingularFetchable":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"EtherSingularFetchable"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EtherSingularFetchable"}],"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherSingularFetchable","url":"\/documentation\/ether\/ethersingularfetchable","abstract":[{"text":"Types conforming to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherSingularFetchable"},{"type":"text","text":" assert that their APIs provide a way to get single instances back, usually by providing an identifier."}],"title":"EtherSingularFetchable","type":"topic","kind":"symbol"},"doc://Ether/documentation/Ether/Ether/Route":{"identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether\/Route","title":"Ether.Route","url":"\/documentation\/ether\/ether\/route","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Route"}],"navigatorTitle":[{"text":"Route","kind":"identifier"}],"type":"topic","abstract":[{"text":"A typealias for ","type":"text"},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","type":"reference","isActive":true},{"text":", namespaced under ","type":"text"},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether","isActive":true,"type":"reference"},{"text":".","type":"text"}],"kind":"symbol"},"doc://Ether/documentation/Ether":{"type":"topic","identifier":"doc:\/\/Ether\/documentation\/Ether","role":"collection","url":"\/documentation\/ether","abstract":[{"text":"Welcome to easy, clean, Swifty networking!","type":"text"}],"kind":"symbol","title":"Ether"},"doc://Ether/documentation/Ether/Ether":{"role":"symbol","title":"Ether","type":"topic","abstract":[{"text":"The core of Ether. All the core functions and types are namespaced under this.","type":"text"}],"url":"\/documentation\/ether\/ether","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Ether"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Ether","kind":"identifier"}],"identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether"},"doc://Ether/documentation/Ether/Introduction":{"kind":"article","role":"collectionGroup","type":"topic","abstract":[{"text":"What is Ether, and why should you use it?","type":"text"}],"identifier":"doc:\/\/Ether\/documentation\/Ether\/Introduction","title":"Introduction","url":"\/documentation\/ether\/introduction"},"doc://Ether/documentation/Ether/EtherFetchable":{"url":"\/documentation\/ether\/etherfetchable","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EtherFetchable"}],"kind":"symbol","abstract":[{"type":"text","text":"A typealias representing conformance to both "},{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherSingularFetchable","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherPluralFetchable","isActive":true},{"type":"text","text":"."}],"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherFetchable","type":"topic","title":"EtherFetchable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EtherFetchable"}]},"doc://Ether/documentation/Ether/EtherRoute/get(type:parameters:decoder:)":{"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute\/get(type:parameters:decoder:)","role":"symbol","title":"get(type:parameters:decoder:)","abstract":[{"text":"Fires off a GET request to fetch data, using the current ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether\/Route"},{"text":" instance.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"get","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"type","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"parameters","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:5EtherAAV","text":"Ether","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Parameters","kind":"typeIdentifier","preciseIdentifier":"s:5EtherAAV10Parametersa"},{"kind":"text","text":", "},{"text":"decoder","kind":"externalParam"},{"kind":"text","text":": "},{"text":"JSONDecoder","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11JSONDecoderC"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/ether\/etherroute\/get(type:parameters:decoder:)","type":"topic","kind":"symbol"},"doc://Ether/documentation/Ether/EtherRoute":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EtherRoute"}],"title":"EtherRoute","role":"symbol","type":"topic","url":"\/documentation\/ether\/etherroute","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute","navigatorTitle":[{"text":"EtherRoute","kind":"identifier"}],"abstract":[{"type":"text","text":"A custom protocol to which host apps can conform."}]},"doc://Ether/documentation/Ether/Quick-Overview":{"url":"\/documentation\/ether\/quick-overview","title":"Quick Overview","identifier":"doc:\/\/Ether\/documentation\/Ether\/Quick-Overview","role":"collectionGroup","type":"topic","kind":"article","abstract":[{"text":"A quick glance at Ether","type":"text"}]},"doc://Ether/documentation/Ether/EtherTypedRoute":{"kind":"symbol","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherTypedRoute","url":"\/documentation\/ether\/ethertypedroute","title":"EtherTypedRoute","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EtherTypedRoute"}],"type":"topic","abstract":[{"type":"text","text":"An extension of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherRoute"},{"text":" that allows routes to declare associated types, corresponding to the type to which the route’s contents decode.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"EtherTypedRoute"}],"role":"symbol"},"doc://Ether/documentation/Ether/EtherPluralFetchable":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"EtherPluralFetchable","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"EtherPluralFetchable","kind":"identifier"}],"identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherPluralFetchable","url":"\/documentation\/ether\/etherpluralfetchable","abstract":[{"type":"text","text":"Types conforming to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/EtherPluralFetchable"},{"text":" assert that their APIs provide a way to get multiple instances back, optionally filtered by fields specified in ","type":"text"},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/Ether\/FetchableFilters","isActive":true}],"title":"EtherPluralFetchable","kind":"symbol","type":"topic"}}}
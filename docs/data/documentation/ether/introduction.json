{"abstract":[{"text":"What is Ether, and why should you use it?","type":"text"}],"sections":[],"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/Ether\/documentation\/Ether\/Quick-Overview","doc:\/\/Ether\/documentation\/Ether\/Usage"],"generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/ether\/introduction"]}],"kind":"article","primaryContentSections":[{"content":[{"type":"heading","text":"What is Ether?","anchor":"What-is-Ether","level":2},{"inlineContent":[{"type":"text","text":"Ether is a "},{"type":"emphasis","inlineContent":[{"text":"delightful","type":"text"}]},{"text":" networking library for Swift. It’s designed to be lightweight, easy to use, and easy to understand.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Why-another-networking-library","text":"Why another networking library?","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"With so many networking libraries out there, why did I make Ether?","type":"text"}]},{"inlineContent":[{"type":"text","text":"After exploring and trying many networking libraries, I found that they all had some problems:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"They’re overcomplicated","type":"text"}]},{"text":". Most networking libraries have a complicated API that is hard to understand and use. Often, you have to chain together a lot of methods and properties, which makes the code hard to read and understand.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"They feel heavy"}],"type":"strong"},{"type":"text","text":". Most networking libraries feel heavy, requiring a lot of boilerplate code and a lot of setup."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"No Swift Concurrency support","type":"text"}],"type":"strong"},{"type":"text","text":". Most networking libraries don’t support Swift Concurrency. They don’t use async\/await, requiring a lot of closures and completion handlers that clutter up your codebase, making it harder to read, understand, and maintain."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"They’re not generic","type":"text"}],"type":"strong"},{"type":"text","text":". Many networking libraries don’t support generics, simply returning "},{"code":"Data","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":". This is an anti-pattern in Swift, and it makes it harder to use the library.","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"They don’t use Swift errors"}],"type":"strong"},{"text":". Many networking libraries aren’t using Swift errors, instead opting for custom result types, which is less semantic and makes it harder to handle errors.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"Ether is designed to solve these problems:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"It’s easy to use","type":"text"}]},{"text":". Ether is designed to be easy to use, with useful defaults and a simple API.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"It’s easy to understand","type":"text"}]},{"text":". Ether is designed to be easy to understand. It follows Swift’s “progressive disclosure” design pattern, where you only need to learn about the features you need. I’ve also put a lot of effort into making the documentation clear and easy to understand.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"It’s lightweight","type":"text"}]},{"type":"text","text":". Ether is designed to be lightweight. It relies on Swift’s built-in "},{"type":"codeVoice","code":"URLSession"},{"type":"text","text":" and "},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":"\/"},{"code":"JSONDecoder","type":"codeVoice"},{"text":" types, and it doesn’t require a lot of boilerplate code or setup.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Full Swift Concurrency support","type":"text"}]},{"type":"text","text":". Ether is designed to support Swift Concurrency. It uses async\/await, which makes it easier to use and understand."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"It’s generic","type":"text"}],"type":"strong"},{"text":". Ether is designed to be generic. It can be used with any type that conforms to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":", which makes it easier to use. Conforming to ","type":"text"},{"code":"Fetchable","type":"codeVoice"},{"type":"text","text":" provides even more features."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"It uses Swift errors"}],"type":"strong"},{"text":". Ether properly handles errors, including network errors and HTTP errors, and throws them as Swift errors.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"It’s open-source","type":"text"}]},{"text":". Ether is open source! It’s free to use, and anyone can contribute to it.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"Furthermore, Ether has some features that you won’t find in other networking libraries:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"Automatic decoding","type":"text"}],"type":"strong"},{"text":". Ether automatically decodes JSON responses into Swift types. This not only makes it easier to use, but greatly reduces the amount of boilerplate code you need to write.","type":"text"}],"type":"paragraph"}]}]},{"text":"Getting started","type":"heading","anchor":"Getting-started","level":2},{"inlineContent":[{"type":"text","text":"Ready to get started? Check out the "},{"type":"reference","identifier":"doc:\/\/Ether\/documentation\/Ether\/Quick-Overview","isActive":true},{"type":"text","text":"!"}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Ether\/documentation\/Ether"]]},"metadata":{"role":"collectionGroup","modules":[{"name":"Ether"}],"title":"Introduction","roleHeading":"Article"},"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/Ether\/documentation\/Ether\/Introduction","interfaceLanguage":"swift"},"references":{"doc://Ether/documentation/Ether/Usage":{"kind":"article","abstract":[{"text":"There are several ways to use Ether. This article will help you decide which way to use, and in which cases.","type":"text"}],"role":"collectionGroup","title":"Usage","type":"topic","url":"\/documentation\/ether\/usage","identifier":"doc:\/\/Ether\/documentation\/Ether\/Usage"},"doc://Ether/documentation/Ether":{"kind":"symbol","abstract":[{"type":"text","text":"Welcome to easy, clean, Swifty networking!"}],"title":"Ether","identifier":"doc:\/\/Ether\/documentation\/Ether","url":"\/documentation\/ether","role":"collection","type":"topic"},"doc://Ether/documentation/Ether/Quick-Overview":{"title":"Quick Overview","abstract":[{"type":"text","text":"A quick glance at Ether"}],"role":"collectionGroup","identifier":"doc:\/\/Ether\/documentation\/Ether\/Quick-Overview","url":"\/documentation\/ether\/quick-overview","type":"topic","kind":"article"}}}
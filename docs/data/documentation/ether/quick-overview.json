{"sections":[],"kind":"article","seeAlsoSections":[{"generated":true,"title":"Essentials","identifiers":["doc:\/\/Ether\/documentation\/Ether\/Introduction","doc:\/\/Ether\/documentation\/Ether\/Usage"]}],"hierarchy":{"paths":[["doc:\/\/Ether\/documentation\/Ether"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"inlineContent":[{"text":"Let’s say you want to go fetch an instance of ","type":"text"},{"type":"codeVoice","code":"Blade"},{"text":" with ID ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Normally, you’d write some code looking like this:"}],"type":"paragraph"},{"code":["let url = URL(string: \"https:\/\/xcapi.com\/blades\")! \/\/ Someone should make this API…","","var request = URLRequest(url: url)","request.httpMethod = \"GET\"","","let task = URLSession.shared.dataTask(with: request) { data, response, error in","    guard error == nil else {","        \/\/ Handle error…","        return","    }","    ","    do {","        if let pyra = try JSONDecoder().decode(Blade.self, from: data) {","            \/\/ It's about time!","        }","    } catch {","        \/\/ Handle error…","    }","}","","task.resume()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"inlineContent":[{"text":"…Yikes.","type":"text"}],"type":"emphasis"},{"text":" Are we cavemen?? Surely we can do better.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"GET","anchor":"GET","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s replace this GET request using Ether:"}]},{"syntax":"swift","type":"codeListing","code":["let pyra = try? await Ether.get(route: Routes.blade(id: 1),","                                type: Blade.self)"]},{"inlineContent":[{"type":"text","text":"Yep, Ether will not only perform the request for you, in one call, using async\/await, but it will even decode the result into the "},{"code":"Decodable","type":"codeVoice"},{"text":" type you want to use.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"POST","text":"POST","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"What about "},{"code":"POST","type":"codeVoice"},{"type":"text","text":"s?"}]},{"type":"codeListing","syntax":"swift","code":["try? await Ether.post(route: Routes.time,","                      with: reyn)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dead simple."}]},{"level":2,"anchor":"Custom-Requests","type":"heading","text":"Custom Requests"},{"type":"paragraph","inlineContent":[{"text":"Okay, but what about those times when you need to send a ","type":"text"},{"code":"PUT","type":"codeVoice"},{"type":"text","text":" request the server, using a dictionary "},{"type":"emphasis","inlineContent":[{"type":"text","text":"without"}]},{"text":" a corresponding struct, ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"AND"}]},{"type":"text","text":" it needs GZip encoding?"}]},{"inlineContent":[{"text":"…sounds ","type":"text"},{"inlineContent":[{"text":"awfully","type":"text"}],"type":"emphasis"},{"type":"text","text":" contrived, but hey, Ether’s got you covered here as well:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let result = try? await Ether.request(route: Routes.locations,","                                      method: .put,","                                      parameters: [\"Dunban\": \"over there\"],","                                      usingEncoding: .gZip)"]},{"inlineContent":[{"type":"text","text":"Enjoy!"}],"type":"paragraph"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"A quick glance at Ether"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/ether\/quick-overview"]}],"metadata":{"role":"collectionGroup","title":"Quick Overview","roleHeading":"Article","modules":[{"name":"Ether"}]},"identifier":{"url":"doc:\/\/Ether\/documentation\/Ether\/Quick-Overview","interfaceLanguage":"swift"},"references":{"doc://Ether/documentation/Ether/Usage":{"type":"topic","identifier":"doc:\/\/Ether\/documentation\/Ether\/Usage","url":"\/documentation\/ether\/usage","kind":"article","abstract":[{"type":"text","text":"There are several ways to use Ether. This article will help you decide which way to use, and in which cases."}],"title":"Usage","role":"collectionGroup"},"doc://Ether/documentation/Ether/Introduction":{"role":"collectionGroup","title":"Introduction","abstract":[{"type":"text","text":"What is Ether, and why should you use it?"}],"type":"topic","identifier":"doc:\/\/Ether\/documentation\/Ether\/Introduction","url":"\/documentation\/ether\/introduction","kind":"article"},"doc://Ether/documentation/Ether":{"url":"\/documentation\/ether","type":"topic","identifier":"doc:\/\/Ether\/documentation\/Ether","title":"Ether","role":"collection","abstract":[{"text":"Welcome to easy, clean, Swifty networking!","type":"text"}],"kind":"symbol"}}}